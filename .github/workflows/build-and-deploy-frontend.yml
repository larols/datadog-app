name: Build and Deploy Frontend

on:
  push:
    branches: [ main ]
    paths:
      - 'frontend/**'
      - 'k8s/frontend-deployment.yaml'
      - 'k8s/frontend-service.yaml'
      - '.github/workflows/build-and-deploy-frontend.yml'

jobs:
  compute-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.ver.outputs.version }}
    steps:
      - name: Set 7-char version
        id: ver
        run: echo "version=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT

  test:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    continue-on-error: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        run: |
          cd frontend
          npm install

      - name: Configure Datadog Test Optimization
        uses: datadog/test-visibility-github-action@v2
        with:
          languages: js
          api_key: ${{ secrets.DD_API_KEY }}
          site: datadoghq.eu

      - name: Run Jest tests and generate JUnit report
        run: |
          cd frontend
          mkdir -p reports/junit
          npm test -- --ci --coverage || echo "Tests failed, continuing..."
        continue-on-error: true

      - name: Upload test results to Datadog
        run: |
          cd frontend
          npx @datadog/datadog-ci junit upload ./junit.xml --service datadog-app-frontend --env production
        continue-on-error: true

  build-and-push:
    runs-on: ubuntu-latest
    needs: [ compute-version ]
    timeout-minutes: 5
    env:
      VERSION: ${{ needs.compute-version.outputs.version }}
      DD_BETA_COMMANDS_ENABLED: 1
      DD_SITE: datadoghq.eu
      DD_API_KEY: ${{ secrets.DD_API_KEY }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Show VERSION
        run: echo "Using VERSION=$VERSION"

      - name: Update version in index.html
        run: |
          sed -i -E "s/version:\s*['\"]VERSION['\"]/version: '${VERSION}'/g" frontend/public/index.html
          # Guard: fail if replacement didn't happen
          grep -q "version: '${VERSION}'" frontend/public/index.html || { echo "version replacement failed"; exit 1; }

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: |
          REPO_URL=$(git config --get remote.origin.url)
          COMMIT_SHA=$(git rev-parse HEAD)
          docker build -f frontend/Dockerfile frontend/ \
            -t ${{ secrets.DOCKER_USERNAME }}/datadog-app-frontend:latest \
            --build-arg DD_GIT_REPOSITORY_URL="$REPO_URL" \
            --build-arg DD_GIT_COMMIT_SHA="$COMMIT_SHA" \
            --build-arg DD_VERSION="$VERSION"

      - name: Create container to extract build artifacts
        run: |
          docker create --name tmpapp ${{ secrets.DOCKER_USERNAME }}/datadog-app-frontend:latest
          docker cp tmpapp:/usr/share/nginx/html ./_extracted
          docker rm tmpapp

      - name: List extracted JS + maps
        run: |
          find ./_extracted -type f \( -name "*.js" -o -name "*.map" \) | head -n 200

      - name: Upload sourcemaps to Datadog
        env:
          DATADOG_SITE: datadoghq.eu
          DATADOG_API_KEY: ${{ secrets.DD_API_KEY }}
        run: |
          [ -n "$VERSION" ] || { echo "ERROR: VERSION is empty"; exit 1; }
          echo "Uploading sourcemaps with release-version=$VERSION"
          npx @datadog/datadog-ci sourcemaps upload ./_extracted \
            --service datadog-app-frontend \
            --release-version "$VERSION" \
            --minified-path-prefix "http://192.168.50.240/static/js"

      - name: Upload Git metadata to Datadog
        env:
          DATADOG_SITE: datadoghq.eu
          DATADOG_API_KEY: ${{ secrets.DD_API_KEY }}
        run: npx @datadog/datadog-ci git-metadata upload

      - name: Push Docker image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/datadog-app-frontend:latest

  deploy:
    name: Deploy to k8s
    runs-on: ubuntu-latest
    needs: [ compute-version, build-and-push ]
    timeout-minutes: 5
    env:
      VERSION: ${{ needs.compute-version.outputs.version }}
      DD_BETA_COMMANDS_ENABLED: 1
      DD_GITHUB_JOB_NAME: Deploy to k8s
      DD_SITE: datadoghq.eu
      DD_API_KEY: ${{ secrets.DD_API_KEY }}
    steps:
      - name: Show VERSION
        run: echo "Deploying VERSION=$VERSION"

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Tag pipeline in Datadog
        run: npx @datadog/datadog-ci tag --level pipeline --tags team:datadog-app

      - name: Set deployment start time
        id: set_deploy_start
        run: echo "deploy_start=$(date +%s)" >> $GITHUB_ENV

      - name: Configure kubectl
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBECONFIG_BASE64 }}" | base64 --decode > ~/.kube/config

      - name: Generate frontend deployment with VERSION
        run: |
          # Ensure your k8s template references ${VERSION}
          envsubst < k8s/frontend-deployment.yaml > k8s/frontend-deployment-template.yaml

      - name: Deploy Frontend to Kubernetes
        run: |
          kubectl apply -f k8s/frontend-deployment-template.yaml --insecure-skip-tls-verify
          kubectl apply -f k8s/frontend-service.yaml --insecure-skip-tls-verify

      - name: Mark deployment in Datadog
        run: npx @datadog/datadog-ci deployment mark --env production --service datadog-app-frontend --revision "${{ github.sha }}"
      
      - name: Track deployment in Datadog
        env:
          DD_BETA_COMMANDS_ENABLED: 1
          DD_SITE: datadoghq.eu
          DD_API_KEY: ${{ secrets.DD_API_KEY }}
        run: |
          npx @datadog/datadog-ci dora deployment \
            --service datadog-app-frontend \
            --env production \
            --started-at ${{ env.deploy_start }} \
            --finished-at $(date +%s) \
            --git-repository-url "${{ github.event.repository.html_url }}" \
            --git-commit-sha ${{ github.sha }}
 
      - name: Send measure to Datadog (Error Rate)
        run: |
          npx @datadog/datadog-ci measure \
            --level pipeline \
            --measures "custom_error_rate:0.56" \
            --measures "custom_deploy_time:$(($(date +%s) - ${{ env.deploy_start }}))"
